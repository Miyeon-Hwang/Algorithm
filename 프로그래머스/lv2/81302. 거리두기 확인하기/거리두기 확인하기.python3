# def check_distance(r, c, place):
#     if r == 5 and c == 4:
#         return True
#     # 한 칸 거리
#     if place[r][c+1] == "P" or place[r+1][c] == "P":
#         return False
#     # 직선으로 두칸 거리
#     if place[r][c+2] == "P":
#         if place[r][c+1] != "X":
#             return False
#     if place[r+2][c] == "P":
#         if place[r+1][c] != "X":
#             return False
#     # 대각선 오른쪽아래
#     if place[r+1][c+1] == "P":
#         if place[r][c+1] != "X" or place[r+1][c] != "X":
#             return False
#     # 대각선 오른쪽 위
#     if place[r-1][c+1] == "P":
#         if place[r-1][c] != "X" or place[r][c+1] != "X":
#             return False
#     return True


# def check_place_distance(place):
#     for r in range(1, 6):
#         for c in range(5):
#             if place[r][c] == "P":
#                 if not check_distance(r, c, place):
#                     print(r,c)
#                     return 0
#     return 1
    

# def solution(places):
#     for place in places:
#         for i in range(5):
#             place[i] += "OO"
#         place = ["OOOOOOO"] + place + ["OOOOOOO", "OOOOOOO"]
#         answer.append(check_place_distance(place))
#     return answer

# =============================================================

# 거리가 2 이상이 경우를 대비해 bfs 풀이
from collections import deque

dr = [-1,1,0,0]
dc = [0,0,-1,1]
MAX_D = 2

def bfs(r, c, place):
    q = deque()
    q.append((r, c, 0))
    visited = [(r,c)]
    while q:
        cur = q.popleft()
        if cur[2]  == MAX_D:
            continue
        for i in range(4):
            nr = cur[0] + dr[i]
            nc = cur[1] + dc[i]
            if nr >= 0 and nr < 5 and nc >= 0 and nc < 5:
                if (nr, nc) not in visited:
                    if place[nr][nc] == "P":
                        return False
                    if place[nr][nc] == "O":
                        q.append((nr, nc, cur[2] + 1))
    return True
    
    
def check_place(place):
    for i in range(5):
        for j in range(5):
            if place[i][j] == "P":
                if not bfs(i, j, place):
                    return 0
    return 1
    
def solution(places):
    return [check_place(p) for p in places]