# 처음풀이 : dijkstra 사용 -> Time: 0.86 ms, Memory: 10.3 MB => 빠르긴 이게 훨씬 빠름
# from collections import defaultdict
# import heapq

# MAX_FARE = 10 ** 10

# def solution(n, s, a, b, fares):
    
#     def dijkstra(start, fare):
#         q = []
#         heapq.heappush(q, (0, start))
#         fare[start] = 0
#         while q:
#             cur_f, cur = heapq.heappop(q)
#             if cur_f > fare[cur]:
#                 continue
#             for i, f in fare_map[cur]:
#                 if fare[i] > cur_f + f:
#                     fare[i] = cur_f + f
#                     heapq.heappush(q, (cur_f + f, i))

#     fare_map = defaultdict(list)
#     for i, j, f in fares:
#         fare_map[i].append([j, f])
#         fare_map[j].append([i, f])

#     fare_k = [MAX_FARE for _ in range(n + 1)] # s -> k 까지의 최단 거리
#     fare_a = [MAX_FARE for _ in range(n + 1)] # a -> k 까지의 최단 거리(필요한건 k -> a 이지만 방향성이 없으므로)
#     fare_b = [MAX_FARE for _ in range(n + 1)] # b -> k 까지의 최단 거리
#     dijkstra(s, fare_k)
#     dijkstra(a, fare_a)
#     dijkstra(b, fare_b)
    
#     answer = MAX_FARE
#     for i in range(1, n+1):
#         cur_fare = fare_k[i] + fare_a[i] + fare_b[i]
#         if answer > cur_fare:
#             answer = cur_fare
#     return answer



# 공부! 플로이드-워셜 알고리즘 풀이 
from math import inf
def solution(n, s, a, b, fares):
    f_map = [[inf for _ in range(n)] for _ in range(n)]
    
    for i in range(n):
        f_map[i][i] = 0
        
    for i, j, f in fares:
        f_map[i-1][j-1] = f
        f_map[j-1][i-1] = f

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if f_map[i][j] > f_map[i][k] + f_map[k][j]:
                    f_map[i][j] = f_map[i][k] + f_map[k][j]
    return min([f_map[s-1][k] + f_map[k][a-1] + f_map[k][b-1] for k in range(n)])