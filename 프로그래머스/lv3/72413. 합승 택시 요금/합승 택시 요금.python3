from collections import defaultdict
import heapq

MAX_FARE = 10 ** 10

def solution(n, s, a, b, fares):
    def dijkstra(start, fare):
        q = []
        heapq.heappush(q, (0, start))
        fare[start] = 0

        while q:
            cur_f, cur = heapq.heappop(q)
            if cur_f > fare[cur]:
                continue

            for i, f in fare_map[cur]:
                if fare[i] > cur_f + f:
                    fare[i] = cur_f + f
                    heapq.heappush(q, (cur_f + f, i))

    fare_map = defaultdict(list)
    for i, j, f in fares:
        fare_map[i].append([j, f])
        fare_map[j].append([i, f])

    fare_min = [MAX_FARE for _ in range(n + 1)]
    dijkstra(s, fare_min)

    answer = MAX_FARE
    for i in range(1, n + 1):
        temp_fare = [MAX_FARE for _ in range(n + 1)]
        dijkstra(i, temp_fare)
        cur_fare = fare_min[i] + temp_fare[a] + temp_fare[b]
        if cur_fare < answer:
            answer = cur_fare
                
    return answer
